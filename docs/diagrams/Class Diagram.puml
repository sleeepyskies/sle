@startuml
'https://plantuml.com/class-diagram

!theme mono

class main {
    + int main()
}

class Engine {
    - Renderer m_renderer
    - GameData m_gameData
    - EventHandler m_eventHandler

    + Engine()
    + void run()
    - void render()
}

object EventHandler {
    - static void handleMouseMotion(const SDL_Event &event, GameData &gameData)
    + static void input(GameData &gameData)
}

class Renderer {
    - SDL_Window *m_window
    - SDL_Renderer *m_renderer

    + Renderer() // inits SDL here
    + ~Renderer()
    + void clear()
    + void present()
    + SDL_Renderer* getRenderer()
}

class GameData {
    - bool m_running = true
    - Camera m_camera
    - TileMap m_map
    - glm::ivec2 m_mousePos
    - std::unordered_map<SDL_Keycode, bool> m_keysPressed

    - void updateRunning()

    + void init()
    + void stop()
    + bool running() const
    + void update()
    + void draw(const Renderer &ren)
    + void setMousePos()
    + void keyDown(SDL_Keycode key)
    + void keyUp(SDL_Keycode key)
}

class TileMap {
    - std::string m_name
    - std::unordered_map<glm::i8vec2, Chunk> m_chunks
    - std::vector<ref<Texture>> m_tileTextures
    - std::vector<glm::i8vec2> m_chunkIndices

    + TileMap() = default
    + ~TileMap() = default
    + void draw(const Camera &cam, const Renderer &ren) const
    + std::optional<SDL_Rect> findCursorTile(const Camera &cam, glm::ivec2 mousePos)
    + bool save() const
    + bool load(const std::string &mapName = DEFAULT_MAP)
}

struct Chunk {
    + std::vector<Tile> m_tiles

    + Chunk() // allocate space for 16 x 16 tiles
    + Tile& tile(const int x, const int y)
    + Tile& tile(const int x, const int y) const
}

struct Tile {
    - uint8_t m_textureIndex

    + explicit Tile(const uint8_t textureIndex = 0xFF)
    + uint8_t textureIndex()
    + uint8_t& textureIndex()
}

class Texture {
    - SDL_Texture* m_texture

    + Texture() = delete
    + Texture(const Texture&) = delete
    + Texture& operator= (const Texture&) = delete
    + explicit Texture(SDL_Texture* texture)
    + ~Texture()
    + SDL_Texture* texture()
    + explicit operator bool()
}

class AssetManager {
    - std::unordered_map<fs::path>, wref<Texture>> m_textures
    - cref<Renderer> m_renderer

    + AssetManager(const cref<Renderer> &ren)
    + ~AssetManager() = default
    + ref<Texture> texture(const fs::path &filePath)
}

AssetManager *-- Renderer
AssetManager *-- Texture

main <-- Engine : calls constructor

Engine *-- Renderer
Engine *-- GameData
Engine *-- EventHandler

GameData *-- TileMap

TileMap *-- Chunk
TileMap *-- Texture
Chunk *-- Tile

@enduml