@startuml
'https://plantuml.com/class-diagram

!theme mono

class main {
    + int main()
}

object AssetLoader {
    + SDL_Texture* loadTexture(string filePath)
}

object Constants {
    + std::string WINDOW_NAME
    + int WIDTH
    + int HEIGHT
    + int TILE_HEIGHT
    + int TILE_WIDTH
    + int MAP_HEIGHT
    + int MAP_WIDTH
}

class Engine {
    - Renderer m_renderer
    - GameData m_gameData
    - EventHandler m_eventHandler
    - bool m_running = true

    + Engine()
    + ~Engine()
    - void init()
    + void run()
    - void readInput()
    - void update()
    - void render()
}

class EventHandler {
    - queue<pair<SDL_Event, SDL_EventType>> m_eventQueue

    + void enqueueEvent(SDL_Event &event, SDL_EventType eventType)
    + void processEvents(GameData &gameData)
}

class Renderer {
    - SDL_Window *m_window
    - SDL_Renderer *m_renderer

    + Renderer()
    + ~Renderer()
    + void clear()
    + void present()
    + SDL_Renderer* getRenderer()
}

struct GameData {
    + Map m_map
    + vector<Entity> m_entities

    + void renderMap(Renderer &ren)
    + void renderEntities(Renderer &ren)
    + void addTile(SDL_Texture* texture)
}

struct Map {
    + vector<vector<Tile>> m_tiles

    + void renderTiles(Renderer &ren)
    + void addTile(SDL_Texture* texture)
}

struct Tile {
    + SDL_Texture m_texture
    + SDL_Rect m_posRect

    + void renderSelf(Renderer &ren)
}

class Entity {
    - unsigned int m_id
    + SDL_Texture m_texture
    + SDL_Rect m_posRect

    + void renderSelf(Renderer &ren)
}





main <-- Engine : calls constructor

Engine *-- Renderer
Engine *-- GameData
Engine *-- EventHandler

GameData *-- Map
GameData *-- Entity

Map *-- Tile

@enduml